// Prisma Schema for AdvancedCare Remits
// Compatible with Render PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// ============================================
// PATIENT & BILLING TABLES
// ============================================

model patients {
  id                 String           @id @default(uuid()) @db.Uuid
  inbox_health_id    String?          @unique
  first_name         String?
  last_name          String?
  email              String?
  phone              String?
  date_of_birth      DateTime?        @db.Date
  address_line1      String?
  address_line2      String?
  city               String?
  state              String?
  zip_code           String?
  balance_cents      Int              @default(0)
  square_customer_id String?
  external_ids       Json?
  created_at         DateTime         @default(now()) @db.Timestamptz
  updated_at         DateTime         @updatedAt @db.Timestamptz
  
  invoices           invoices[]
  payments           payments[]
  patient_plans      patient_plans[]
  square_transactions square_transactions[]
  clinical_notes     clinical_notes[]
  patient_surveys    patient_surveys[]
  
  @@index([inbox_health_id])
  @@index([email])
  @@index([last_name])
  @@index([square_customer_id])
}

model practices {
  id              String     @id @default(uuid()) @db.Uuid
  name            String
  address         String?
  phone           String?
  email           String?
  npi             String?
  tax_id          String?
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  invoices        invoices[]
}

model doctors {
  id              String     @id @default(uuid()) @db.Uuid
  first_name      String
  last_name       String
  npi             String?
  specialty       String?
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  invoices        invoices[]
}

model invoices {
  id                    String            @id @default(uuid()) @db.Uuid
  inbox_health_id       String?           @unique
  patient_id            String            @db.Uuid
  practice_id           String?           @db.Uuid
  doctor_id             String?           @db.Uuid
  invoice_number        String?
  date_of_service       DateTime?         @db.Date
  due_date              DateTime?         @db.Date
  amount_cents          Int
  balance_cents         Int
  status                String?
  processor             String            @default("inbox_health")
  processor_invoice_id  String?
  processor_metadata    Json?
  invoice_title         String?
  invoice_date          DateTime?         @db.Date
  last_payment_date     DateTime?         @db.Date
  time_zone             String?
  delivery_method       String?
  recurring_series_id   String?
  installments_count    Int?
  tip_amount_cents      Int?              @default(0)
  auto_payment_source   String?
  created_at            DateTime          @default(now()) @db.Timestamptz
  updated_at            DateTime          @updatedAt @db.Timestamptz
  
  patient               patients          @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  practice              practices?        @relation(fields: [practice_id], references: [id])
  doctor                doctors?          @relation(fields: [doctor_id], references: [id])
  line_items            invoice_line_items[]
  invoice_payments      invoice_payments[]
  
  @@index([patient_id])
  @@index([inbox_health_id])
  @@index([invoice_number])
  @@index([date_of_service])
  @@index([processor])
  @@index([processor_invoice_id])
  @@index([status])
  @@index([due_date])
  @@unique([processor, processor_invoice_id])
}

model invoice_line_items {
  id              String     @id @default(uuid()) @db.Uuid
  invoice_id      String     @db.Uuid
  description     String
  quantity        Int        @default(1)
  unit_price_cents Int
  amount_cents    Int
  procedure_code  String?
  modifier        String?
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  invoice         invoices   @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  
  @@index([invoice_id])
}

model payments {
  id                String             @id @default(uuid()) @db.Uuid
  inbox_health_id   String?            @unique
  patient_id        String             @db.Uuid
  amount_cents      Int
  payment_method    String?
  payment_date      DateTime           @db.Date
  status            String?
  processor         String?            @default("inbox_health")
  processor_payment_id String?
  tip_amount_cents  Int?               @default(0)
  created_at        DateTime           @default(now()) @db.Timestamptz
  
  patient           patients           @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  invoice_payments  invoice_payments[]
  
  @@index([patient_id])
  @@index([inbox_health_id])
  @@index([payment_date])
  @@index([processor])
}

model invoice_payments {
  id              String     @id @default(uuid()) @db.Uuid
  payment_id      String     @db.Uuid
  invoice_id      String     @db.Uuid
  amount_cents    Int
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  payment         payments   @relation(fields: [payment_id], references: [id], onDelete: Cascade)
  invoice         invoices   @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  
  @@index([payment_id])
  @@index([invoice_id])
}

model patient_plans {
  id              String     @id @default(uuid()) @db.Uuid
  patient_id      String     @db.Uuid
  plan_name       String?
  plan_type       String?
  policy_number   String?
  group_number    String?
  start_date      DateTime?  @db.Date
  end_date        DateTime?  @db.Date
  is_active       Boolean    @default(true)
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  patient         patients   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
}

model square_transactions {
  id                String     @id @default(uuid()) @db.Uuid
  patient_id        String     @db.Uuid
  square_id         String?    @unique
  order_id          String?
  amount_cents      Int
  tip_amount_cents  Int        @default(0)
  total_cents       Int
  currency          String     @default("USD")
  status            String?
  payment_method    String?
  receipt_url       String?
  transaction_date  DateTime   @db.Timestamptz
  created_at        DateTime   @default(now()) @db.Timestamptz
  updated_at        DateTime   @updatedAt @db.Timestamptz
  
  patient           patients   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
  @@index([square_id])
  @@index([transaction_date])
  @@index([status])
}

// ============================================
// CLINIC DATA TABLES
// ============================================

model clinical_notes {
  id              String     @id @default(uuid()) @db.Uuid
  patient_id      String     @db.Uuid
  clinic_id       String     @default("centered-one")
  note_type       String
  title           String
  note_date       DateTime   @db.Date
  cpt_codes       String[]
  is_signed       Boolean    @default(false)
  source_system   String?    @default("centered-osmind")
  sync_status     String?    @default("synced")
  created_at      DateTime   @default(now()) @db.Timestamptz
  updated_at      DateTime   @updatedAt @db.Timestamptz
  
  patient         patients   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
  @@index([clinic_id])
  @@index([note_date])
  @@index([note_type])
}

model patient_surveys {
  id              String     @id @default(uuid()) @db.Uuid
  patient_id      String     @db.Uuid
  clinic_id       String     @default("centered-one")
  survey_type     String
  survey_name     String
  score           Int
  max_score       Int?
  severity_level  String?
  completed_date  DateTime   @db.Timestamptz
  source_system   String?    @default("centered-osmind")
  sync_status     String?    @default("synced")
  created_at      DateTime   @default(now()) @db.Timestamptz
  updated_at      DateTime   @updatedAt @db.Timestamptz
  
  patient         patients   @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
  @@index([clinic_id])
  @@index([completed_date])
  @@index([survey_type])
  @@index([severity_level])
}

model webhook_events {
  id              String     @id @default(uuid()) @db.Uuid
  event_type      String
  payload         Json
  source          String?
  received_at     DateTime   @default(now()) @db.Timestamptz
  processed       Boolean    @default(false)
  processed_at    DateTime?  @db.Timestamptz
  
  @@index([event_type])
  @@index([received_at])
  @@index([processed])
}

// ============================================
// REMITTANCE TABLES
// ============================================

model remittance_documents {
  id                    String               @id @default(uuid()) @db.Uuid
  original_pdf_file     String               @unique
  parsed_json_file      String?
  parsed_markdown_file  String?
  total_pages           Int?
  transaction_date      DateTime?            @db.Date
  imported_at           DateTime             @default(now()) @db.Timestamptz
  
  checks                remittance_checks[]
  
  @@index([transaction_date])
  @@index([imported_at])
}

model remittance_checks {
  id                        String               @id @default(uuid()) @db.Uuid
  document_id               String               @db.Uuid
  payer_name                String?
  payer_address             String?
  payee_name                String?
  payee_address             String?
  payee_tax_id              String?
  payee_id                  String?
  check_eft_trace_number    String?
  check_eft_date            DateTime?            @db.Date
  payment_amount            Decimal?             @db.Decimal(12, 2)
  production_end_cycle_date DateTime?            @db.Date
  created_at                DateTime             @default(now()) @db.Timestamptz
  
  document                  remittance_documents @relation(fields: [document_id], references: [id], onDelete: Cascade)
  claims                    remittance_claims[]
  
  @@index([document_id])
  @@index([check_eft_trace_number])
  @@index([check_eft_date])
  @@index([payee_id])
}

model remittance_claims {
  id                        String                 @id @default(uuid()) @db.Uuid
  check_id                  String                 @db.Uuid
  patient_name              String?
  patient_id                String?
  patient_control_number    String?
  claim_number              String
  claim_date_from           DateTime?              @db.Date
  claim_date_to             DateTime?              @db.Date
  claim_status_code         String?
  claim_received_date       DateTime?              @db.Date
  rendering_provider_name   String?
  rendering_provider_id     String?
  original_reference_number String?
  group_policy              String?
  contract_header           String?
  facility_type             String?
  claim_frequency           String?
  claim_charge              Decimal?               @db.Decimal(12, 2)
  claim_payment             Decimal?               @db.Decimal(12, 2)
  patient_responsibility    Decimal?               @db.Decimal(12, 2)
  created_at                DateTime               @default(now()) @db.Timestamptz
  
  check                     remittance_checks      @relation(fields: [check_id], references: [id], onDelete: Cascade)
  line_items                remittance_claim_lines[]
  
  @@index([check_id])
  @@index([claim_number])
  @@index([patient_id])
  @@index([patient_control_number])
  @@index([rendering_provider_id])
}

model remittance_claim_lines {
  id                            String                    @id @default(uuid()) @db.Uuid
  claim_id                      String                    @db.Uuid
  line_control_number           String?
  line_sequence                 Int?
  service_date_from             DateTime?                 @db.Date
  service_date_to               DateTime?                 @db.Date
  rendering_provider_id         String?
  revenue_code                  String?
  submitted_procedure_code      String?
  submitted_procedure_qualifier String?
  submitted_modifiers           String[]
  submitted_units               Decimal?                  @db.Decimal(10, 2)
  adjudicated_procedure_code    String?
  adjudicated_procedure_qualifier String?
  adjudicated_modifiers         String[]
  adjudicated_units             Decimal?                  @db.Decimal(10, 2)
  charge_amount                 Decimal?                  @db.Decimal(12, 2)
  payment_amount                Decimal?                  @db.Decimal(12, 2)
  remark_codes                  String[]
  created_at                    DateTime                  @default(now()) @db.Timestamptz
  
  claim                         remittance_claims         @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  adjustments                   remittance_adjustments[]
  
  @@index([claim_id])
  @@index([line_control_number])
  @@index([adjudicated_procedure_code])
}

model remittance_adjustments {
  id                  String                   @id @default(uuid()) @db.Uuid
  claim_line_id       String                   @db.Uuid
  group_code          String?
  reason_code         String?
  adjustment_amount   Decimal?                 @db.Decimal(12, 2)
  adjustment_quantity Decimal?                 @db.Decimal(10, 2)
  created_at          DateTime                 @default(now()) @db.Timestamptz
  
  claim_line          remittance_claim_lines   @relation(fields: [claim_line_id], references: [id], onDelete: Cascade)
  
  @@index([claim_line_id])
  @@index([group_code, reason_code])
}

// ============================================
// OSMIND SYNC TABLES
// ============================================

model osmind_patients {
  id              String     @id @default(uuid()) @db.Uuid
  osmind_id       String     @unique
  first_name      String
  last_name       String
  date_of_birth   DateTime?  @db.Date
  email           String?
  phone           String?
  raw_data        Json?
  synced_at       DateTime   @default(now()) @db.Timestamptz
  last_updated    DateTime   @updatedAt @db.Timestamptz
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  appointments    osmind_appointments[]
  insurance_cards osmind_insurance_cards[]
  
  @@index([osmind_id])
  @@index([first_name, last_name])
  @@index([email])
  @@index([synced_at])
}

model osmind_appointments {
  id              String     @id @default(uuid()) @db.Uuid
  osmind_id       String     @unique
  patient_id      String     @db.Uuid
  appointment_date DateTime   @db.Timestamptz
  appointment_time String?
  provider_id     String?
  provider_name   String?
  room_id         String?
  room_name       String?
  status          String?
  notes           String?
  raw_data        Json?
  synced_at       DateTime   @default(now()) @db.Timestamptz
  last_updated    DateTime   @updatedAt @db.Timestamptz
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  patient         osmind_patients @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
  @@index([osmind_id])
  @@index([appointment_date])
  @@index([provider_id])
  @@index([room_id])
  @@index([status])
}

model osmind_insurance_cards {
  id              String     @id @default(uuid()) @db.Uuid
  osmind_id       String     @unique
  patient_id      String     @db.Uuid
  name            String?
  member_id       String?
  group_number    String?
  plan_name       String?
  carrier_name    String?
  image_url       String?
  raw_data        Json?
  synced_at       DateTime   @default(now()) @db.Timestamptz
  last_updated    DateTime   @updatedAt @db.Timestamptz
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  patient         osmind_patients @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  
  @@index([patient_id])
  @@index([osmind_id])
  @@index([member_id])
  @@index([synced_at])
}

// ============================================
// DEPLOYMENT MONITORING TABLES
// ============================================

model deployments {
  id                  String              @id @default(uuid()) @db.Uuid
  name                String              @unique
  display_name        String
  url                 String
  health_check_url    String?
  platform            String              @default("render")
  repository_url      String?
  branch              String              @default("main")
  status              String              @default("unknown")
  last_deployed_at    DateTime?           @db.Timestamptz
  last_health_check   DateTime?           @db.Timestamptz
  health_status       String              @default("unknown")
  environment         String              @default("production")
  notes               String?
  metadata            Json?
  created_at          DateTime            @default(now()) @db.Timestamptz
  updated_at          DateTime            @updatedAt @db.Timestamptz
  
  deployment_logs     deployment_logs[]
  deployment_stats    deployment_stats[]
  
  @@index([name])
  @@index([status])
  @@index([health_status])
  @@index([last_deployed_at])
}

model deployment_logs {
  id              String     @id @default(uuid()) @db.Uuid
  deployment_id   String     @db.Uuid
  log_type        String
  message         String
  metadata        Json?
  created_at      DateTime   @default(now()) @db.Timestamptz
  
  deployment      deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)
  
  @@index([deployment_id])
  @@index([log_type])
  @@index([created_at])
}

model deployment_stats {
  id                  String     @id @default(uuid()) @db.Uuid
  deployment_id       String     @db.Uuid
  stat_date           DateTime   @db.Date
  uptime_percentage   Decimal?   @db.Decimal(5, 2)
  response_time_ms    Int?
  error_count         Int        @default(0)
  success_count       Int        @default(0)
  total_requests      Int        @default(0)
  metadata            Json?
  created_at          DateTime   @default(now()) @db.Timestamptz
  
  deployment          deployments @relation(fields: [deployment_id], references: [id], onDelete: Cascade)
  
  @@unique([deployment_id, stat_date])
  @@index([deployment_id])
  @@index([stat_date])
}
